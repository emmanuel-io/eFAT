digraph "eEF_mount"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="eEF_mount",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Mount a Logical Drive."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="eEFPortSyncObjectCreate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__system_8c.html#a29ffd97760086e7e8ce4245774d583a4",tooltip="Create a Synchronization Object This function is called in f_mount() function to create a new synchro..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="eEFPortSyncObjectDelete",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__system_8c.html#a6161c3b8b6aec92a5fcebd19ccd26cea",tooltip="Delete a Synchronization Object This function is called in f_mount() function to delete a synchroniza..."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="eEFPrvFSLock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__fs__lock_8c.html#affe147a63e8259b5f458d73f9fceb119",tooltip="Request grant to access the volume."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="eEFPortSyncObjectTake",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__system_8c.html#a47c639d0e4aa1824fb30225c63f146e0",tooltip="Request Grant to Access the Volume This function is called on entering file functions to lock the vol..."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="eEFPrvFSUnlock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__fs__lock_8c.html#a49476cbc684bb4e699574a7e99b55f42",tooltip="Conditionnal Release grant to access the volume."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="eEFPortSyncObjectGive",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__system_8c.html#a49bd8d8f0b4f08a5ad12430a9ea2ad5e",tooltip="Release Grant to Access the Volume This function is called on leaving file functions to unlock the vo..."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="eEFPrvFSUnlockForce",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__fs__lock_8c.html#a2976505498f0e288de15e0f068c9db38",tooltip="Force Release grant to access the volume."];
  Node8 -> Node7 [id="edge8_Node000008_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="eEFPrvVolumeFSPtrGet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume__mount_8c.html#a589b6ba2206fff5db7148dc11d6a4fa5",tooltip="Determine filesystem object from volume number."];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="eEFPrvVolumeFSPtrSet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume__mount_8c.html#a5bf1da5557975f08a0eddefca26e5b09",tooltip="Set filesystem object pointer associated with volume number."];
  Node1 -> Node11 [id="edge11_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="eEFPrvVolumeMount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume__mount_8c.html#a72257a5dd052fb761470c99b9b8161fd",tooltip="Determine logical drive number and mount the volume if needed."];
  Node11 -> Node12 [id="edge12_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="eEFPrvDriveInitialize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__drive_8c.html#ab8e981894592fee4a148e1a346365de2",tooltip="Initialize a Drive."];
  Node11 -> Node13 [id="edge13_Node000011_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="eEFPrvDriveIOCtrl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__drive_8c.html#a5893f000fc134e0c9532edd743e41ca1",tooltip="Miscellaneous Functions."];
  Node11 -> Node14 [id="edge14_Node000011_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="eEFPrvLockClear",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__file__lock_8c.html#a7a17b9681c29fa887456ad65f1643abe",tooltip="Clear lock entries of the volume."];
  Node11 -> Node15 [id="edge15_Node000011_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="eEFPrvVolumeFind",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume_8c.html#a0d6f884e5af9b5ea4056975d5e68b7c8",tooltip="Find an FAT volume (It supports only generic partitioning rules, MBR, GPT and SFD)"];
  Node15 -> Node16 [id="edge16_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="eEFPrvFSSectorCheck",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume_8c.html#af05aa78d25558bd9c60d9f79207d477e",tooltip="Load a sector and check if it is an FAT VBR."];
  Node16 -> Node17 [id="edge17_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="eEFPortMemCompare",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__memory_8c.html#ad67e0f283a83a3e42a9b014d252fdc55",tooltip="Compare memory block."];
  Node16 -> Node18 [id="edge18_Node000016_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="eEFPrvFSWindowLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__fs__window_8c.html#aaa333640bae9bd8d1343ce84759d2057",tooltip="Load disk access window in the filesystem object."];
  Node18 -> Node19 [id="edge19_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="eEFPrvDriveRead",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__drive_8c.html#aba16ac504590c2d8048494b67d92c42f",tooltip="Read Sector(s)"];
  Node18 -> Node20 [id="edge20_Node000018_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="eEFPrvFSWindowStore",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__fs__window_8c.html#a791d630d91cc407405d6af1b502ed060",tooltip="Store disk access window in the filesystem object."];
  Node20 -> Node21 [id="edge21_Node000020_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="eEFPrvDriveWrite",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__drive_8c.html#a20cbf61d32f19140642ab9449495fd02",tooltip="Write Sector(s)"];
  Node16 -> Node22 [id="edge22_Node000016_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="u16EFPortLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__load__store_8c.html#a89759d8764558079eda50fba369fb1dc",tooltip="Load a 2-byte little-endian word."];
  Node15 -> Node23 [id="edge23_Node000015_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="eEFPrvVolumeFindInGPT",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume_8c.html#afc541ae6923e33915f39f767f416714f",tooltip="Find an FAT volume in GPT (It supports only generic partitioning rules, MBR, GPT and SFD)"];
  Node23 -> Node17 [id="edge24_Node000023_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node16 [id="edge25_Node000023_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node18 [id="edge26_Node000023_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node24 [id="edge27_Node000023_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="eEFPrvGPTHeaderTest",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__group_f_u_n_c_t_i_o_n___g_p_t.html#gaec8b3b6e8a67c765eb47d76db9c372ed",tooltip="Check validity of GPT header."];
  Node24 -> Node17 [id="edge28_Node000024_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node25 [id="edge29_Node000024_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="u32EFPortLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__load__store_8c.html#ae58446622f3e668a58f135d246d2f968",tooltip="Load a 4-byte little-endian word."];
  Node24 -> Node26 [id="edge30_Node000024_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="u32ffCRC32",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$group__group_f_u_n_c_t_i_o_n___g_p_t.html#ga198468abbe16ad4fcdbcc20620783605",tooltip="Calculate CRC32 in byte-by-byte."];
  Node23 -> Node25 [id="edge31_Node000023_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node27 [id="edge32_Node000023_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="u64EFPortLoad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__port__load__store_8c.html#a7c94b3154905c218cf29e4d26fd6ccc9",tooltip="Load a 8-byte little-endian word."];
  Node15 -> Node28 [id="edge33_Node000015_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="eEFPrvVolumeFindInMBR",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume_8c.html#a8573ab44dc2a8a3988ebbec34cb72d61",tooltip="Find an FAT volume in MBR (It supports only generic partitioning rules, MBR, GPT and SFD)"];
  Node28 -> Node16 [id="edge34_Node000028_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node28 -> Node25 [id="edge35_Node000028_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node29 [id="edge36_Node000001_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="eEFPrvVolumeNbGet",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$ef__prv__volume__nb_8c.html#ae2bd15ca8bfef7ee05689f52e92a8f22",tooltip="Get volume number from path name."];
}
